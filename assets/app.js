angular.module("app",["ngRoute","ngMessages"]);var module=angular.module("app");module.controller("BudgetCtrl",["$scope","BudgetSvc",function(t,o){t.newBudget=function(){t.budgetForm.$valid?console.log("form is valid"):console.log("form is invalid");var n=JSON.stringify({state:parseFloat(t.budget.state),date:t.budget.date});console.log(n),o.create(n).success(function(o){t.budget=null,console.log(o)}).error(function(t){console.log(t)})}}]),angular.module("app").service("BudgetSvc",["$http",function(t){this.fetch=function(){return t.get("http://localhost:3000/api/budgets")},this.create=function(o){return t.post("http://localhost:3000/api/budget",o,{headers:{"Content-Type":"application/json"}})}}]);var app=angular.module("app");app.controller("BudgetsCtrl",["$scope","BudgetSvc",function(t,o){o.fetch().success(function(o){console.log(JSON.stringify(o)),t.budgets=o}).error(function(t){console.log(JSON.stringify(t))})}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"StartCtrl",templateUrl:"start.html"}).when("/transaction",{controller:"TransactionCtrl",templateUrl:"transaction.html"}).when("/transactions",{controller:"TransactionsCtrl",templateUrl:"transactions.html"}).when("/budget",{controller:"BudgetCtrl",templateUrl:"budget.html"}).when("/budgets",{controller:"BudgetsCtrl",templateUrl:"budgets.html"})}]),angular.module("app").controller("StartCtrl",["$scope",function(t){}]);var module=angular.module("app");module.controller("TransactionCtrl",["$scope","TransactionsSvc",function(t,o){t.newTransaction=function(){t.transactionForm.$valid?console.log("form is valid"):console.log("form is invalid");var n=JSON.stringify({amount:parseFloat(t.transaction.amount),type:t.transaction.type,description:t.transaction.description,date:t.transaction.date});console.log(n),o.create(n).success(function(o){t.transaction=null,console.log(o)}).error(function(t){console.log(t)})}}]),angular.module("app").service("TransactionsSvc",["$http",function(t){this.fetch=function(){return t.get("http://localhost:3000/api/transactions")},this.create=function(o){return t.post("http://localhost:3000/api/transaction",o,{headers:{"Content-Type":"application/json"}})}}]);var app=angular.module("app");app.controller("TransactionsCtrl",["$scope","TransactionsSvc",function(t,o){o.fetch().success(function(o){console.log(JSON.stringify(o)),t.transactions=o}).error(function(t){console.log(JSON.stringify(t))})}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
